/***************
 * Tethering detection
***************/


/***************
 * Directories
***************/
1. dataset_narus, dataset_sprint, dataset_uscc are the links to the dataset

2. 172.31.7.162:/data/ychen
    stores the copy of the dataset on local disk.

3. plot_summary_ttl
    plot the results generated by tool1.pl
    /export/home/ychen/sprint/output/detect.TTL.summary

4. subtask_nontether_id
    Generate IP's ID field timeseries of non-tethered users. 
    We want to see if there is difference between ID from tehtered users and non-tethered users.

5. subtask_initial_ttl
    Some time ago, the initial TTL of Windows is 64.
    Just a quick check if there is any client whose initial TTL is 64.

    - input: ../output/file.$file_id.ttl.txt

    - output:
        ./output
        <# client> <# normal client w/ TTL_X> <...> <# tethered client w/ TTL_X> <...>


/***************
 * Sprint tools
***************/
1. pcapParser.c
    - input: pcap_file
    - output: 
        print format
        <time> <time usec> <src ip> <dest ip> <proto> <ttl> <id> <length>

    - batch_pcapParser.sh
        - run pcapParser.c in batch
        - input files: /data/ychen/sprint/pcap
        - output files: /data/ychen/sprint/text

    note.
        ignore IP-ENCAP, IP fragmentation


2. analyze_sprint_text.pl
    Group packets in flows, and analyze TTL, tput, pkt number, packet length entropy.

    - input: parsed_pcap_text
        format
        <time> <time usec> <src ip> <dest ip> <proto> <ttl> <id> <length>
    
    - output
        ./output/
        a) file.<id>.tput.ts.txt: 
            total throughput timeseries
        b) file.<id>.pkt.ts.txt
            total packet number timeseries
        c) file.<id>.ids.ts.txt
            IP ID of each packet of each flow
        d) file.<id>.ttl.txt
            TTL of each flow
        e) file.<id>.ttl.ts.txt
            timeseries of # of unique TTLs of each flow
        f) file.<id>.tput.ts.txt
            timeseries of tput of each flow
        g) file.<id>.pkt.ts.txt
            timeseries of # of packets of each flow
        i) file.$file_id.len_entropy.ts.txt
            timeseries of packet len entropy of each flow

    - batch_pcapParser.sh
        - run analyze_sprint_text.pl in batch
        - input files: /data/ychen/sprint/text
        - output files: 
            a) output of analyze_sprint_text.pl
            b) log file: /export/home/ychen/sprint/output/<input file>.log

    note. 
        a flow here means an unique <src IP, dst IP> pair
        XXX: should be changed to <src IP>??


3. detect_tethering.pl

    Read in results from "analyze_sprint_text.pl" and detect tethering usage.
    a) The detection is based on number of different TTL per second. 
    b) After detecting tethered clients, calculate:
        i) how many tethered clients.
        ii) how much traffic are generated by tethered clients.
    c) Find the possible metrics as the detection confidence, and do the inter-flow/intra-flow analysis
        i) tput
        ii) # pkts
        iii) pkt length entropy

    - input: file_id
        The file ID of 3-hr Sprint Mobile Dataset.
        This program uses this ID to look up the output files from "analyze_sprint_text.pl", i.e.
        ./output/
        a) file.<id>.tput.ts.txt: 
            total throughput timeseries
        b) file.<id>.pkt.ts.txt
            total packet number timeseries
        c) file.<id>.ids.ts.txt
            IP ID of each packet of each flow
        d) file.<id>.ttl.txt
            TTL of each flow
        e) file.<id>.ttl.ts.txt
            timeseries of # of unique TTLs of each flow
        f) file.<id>.tput.ts.txt
            timeseries of tput of each flow
        g) file.<id>.pkt.ts.txt
            timeseries of # of packets of each flow
        i) file.$file_id.len_entropy.ts.txt
            timeseries of packet len entropy of each flow

    - output:
        a) Assume TTL heuristic is perfect:
            i) how many tethered clients.
            ii) how much traffic are generated by tethered clients.
        b) intra-flow analysis: the ratio of non-tethered traffic to tethered traffic 
            i) tput
            ii) # pkts
            iii) pkt length entropy
        c) inter-flow analysis: the ratio of non-tethered traffic to tethered traffic 
            i) tput
            ii) # pkts
            iii) pkt length entropy
        d) fig: generate #TTL/tput/#pkts/pkt_len_entropy timeseries of tethered clients detected by TTL
            ./figures_ttl/tehtered.<file_id>.<IP>.ts.txt.eps
        e) fig: generate IDs timeseries of tethered clients detected by TTL
            ./figures_ttl/tehtered.<file_id>.<IP>.ids.txt.eps

    - batch_detect_tethering.sh
        - run detect_tethering.pl in batch
        - input files: /export/home/ychen/sprint/output/
        - output files: /export/home/ychen/sprint/output/detect.TTL.<input file ID>.log

4. tool1.pl
    Read in the output of "detect_tethering.pl" and summarize results from all files into a single file.

    - input: /export/home/ychen/sprint/output/detect.TTL.<input file ID>.log

    - output: /export/home/ychen/sprint/output/detect.TTL.summary

5. tool2.pl
    Summarize how many different TTLs behind the same source IP.

    - input: ./output/file.<id>.ttl.txt

    - output: ./output/files.ttl.summary

6. 




